"" vimrc configuration version 1.2
" First self-based vim configuration
"
"
"                            ..,,,,,,,,,.. 
"                      .,;%%%%%%%%%%%%%%%%%%%%;,. 
"                    %%%%%%%%%%%%%%%%%%%%////%%%%%%, .,;%%;, 
"             .,;%/,%%%%%/////%%%%%%%%%%%%%%////%%%%,%%//%%%, 
"        .,;%%%%/,%%%///%%%%%%%%%%%%%%%%%%%%%%%%%%%%,////%%%%;, 
"     .,%%%%%%//,%%%%%%%%%%%%%%%%@@%a%%%%%%%%%%%%%%%%,%%/%%%%%%%;, 
"    .,%//%%%%//,%%%%///////%%%%%%%@@@%%%%%%///////%%%%,%%//%%%%%%%%, 
"  ,%%%%%///%%//,%%//%%%%%///%%%%%@@@%%%%%////%%%%%%%%%,/%%%%%%%%%%%%% 
" .%%%%%%%%%////,%%%%%%%//%///%%%%@@@@%%%////%%/////%%%,/;%%%%%%%%/%%% 
" %/%%%%%%%/////,%%%%///%%////%%%@@@@@%%%///%%/%%%%%//%,////%%%%//%%%' 
" %//%%%%%//////,%/%a`  'a%///%%%@@@@@@%%////a`  'a%%%%,//%///%/%%%%% 
" %///%%%%%%///,%%%%@@aa@@%//%%%@@@@S@@@%%///@@aa@@%%%%%,/%////%%%%% 
" %%//%%%%%%%//,%%%%%///////%%%@S@@@@SS@@@%%/////%%%%%%%,%////%%%%%' 
" %%//%%%%%%%//,%%%%/////%%@%@SS@@@@@@@S@@@@%%%%/////%%%,////%%%%%' 
" `%/%%%%//%%//,%%%///%%%%@@@S@@@@@@@@@@@@@@@S%%%%////%%,///%%%%%' 
"   %%%%//%%%%/,%%%%%%%%@@@@@@@@@@@@@@@@@@@@@SS@%%%%%%%%,//%%%%%' 
"   `%%%//%%%%/,%%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@S@@%%%%%,/////%%' 
"    `%%%//%%%/,%%%@@@SS@@SSs@@@@@@@@@@@@@sSS@@@@@@%%%,//%%//%' 
"     `%%%%%%/  %%S@@SS@@@@@Ss` .,,.    'sS@@@S@@@@%'  ///%/%' 
"       `%%%/    %SS@@@@SSS@@S.         .S@@SSS@@@@'    //%%' 
"                /`S@@@@@@SSSSSs,     ,sSSSSS@@@@@' 
"              %%//`@@@@@@@@@@@@@Ss,sS@@@@@@@@@@@'/ 
"           %%%%@@00`@@@@@@@@@@@@@'@@@@@@@@@@@'//%% 
"         %%%%%%a%@@@@000aaaaaaaaa00a00aaaaaaa00%@%%%%% 
"     %%%%%%a%%@@@@@@@@@@000000000000000000@@@%@@%%%@%%% 
"  %%%%%%a%%@@@%@@@@@@@@@@@00000000000000@@@@@@@@@%@@%%@%% 
" %%%aa%@@@@@@@@@@@@@@0000000000000000000000@@@@@@@@%@@@%%%% 
" %%@@@@@@@@@@@@@@@00000000000000000000000000000@@@@@@@@@%%%%%
"

set nocompatible
filetype off

call has('python3')

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'jiangmiao/auto-pairs'                      
Plugin 'zxqfl/tabnine-vim' 													" AI autocompleter
Plugin 'vim-scripts/indentpython.vim'
Plugin 'ervandew/supertab'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'									 
Plugin 'dylanaraps/wal.vim'													" Pywal theme
Plugin 'tpope/vim-surround'													" Surround stuff
Plugin 'tpope/vim-repeat'														" . Repetition
Plugin 'tpope/vim-commentary' 											" Comments
Plugin 'junegunn/fzf', { 'do': { -> fzf#install()  }} " fzf
Plugin 'junegunn/fzf.vim'
Plugin 'preservim/nerdtree'													" NerdTree
" Plugin 'wfxr/minimap.vim'                           " Minimap
Plugin 'machakann/vim-highlightedyank'              " Highlight yank
Plugin 'rhysd/git-messenger.vim'                    " Git messenger
Plugin 'psliwka/vim-smoothie'                       " Vim smoothie scrolling
Plugin 'junegunn/vim-slash'                         " Enhancing in-buffer search experience

" Configure
Plugin 'vim-vdebug/vdebug'                          " Debugger

" Aprender funcionamiento
Plugin 'wincent/command-t'													" Command T

if has('nvim') || has('patch-8.0.902')
  Plugin 'mhinz/vim-signify'                        " Vim signify diff in file
else
  Plugin 'mhinz/vim-signify', { 'branch': 'legacy'  }
endif

" Falla con tabnine
"Plugin 'junegunn/vim-peekaboo'                      " Vim peekaboo extends " and @ 

" Contextual plugins 
" Plugin 'mattn/emmet-vim'                            " Emmet
" Plugin 'tweekmonster/django-plus.vim'               " Django
" Plugin 'neoclide/coc.nvim', {'branch': 'release'}   " Coc
" Plugin 'stevearc/vim-arduino'                       " Arduino
" 
" Look at
" https://github.com/wfxr/dotfiles/blob/master/vim/vim_plug
" https://github.com/justinmk/vim-sneak
" https://github.com/vimwiki/vimwiki
" 'mbbill/undotree'
" https://github.com/vim-utils/vim-husk 
" https://github.com/matze/vim-move
" https://github.com/junegunn/vim-easy-align 
" https://github.com/junegunn/vim-slash
" https://github.com/sirver/UltiSnips
" https://github.com/Shougo/echodoc.vim

call vundle#end()

filetype plugin on

syntax enable
colorscheme wal

"Fly mode in auto-pairs
let g:AutoPairsFlyMode = 0

"Tab configuration
set tabstop=2
set shiftwidth=2

" Make backspace work as you should expect
set backspace =indent,eol,start
" Switch between buffers without having to save first 
set hidden
" Show as much as possible of the last line
set display =lastline
" Highlite while searching with / or ?
set incsearch
" Keep matches highlighted 
set hlsearch
" Faster redrawing
set ttyfast
" Only redraw when necessary
set cursorline
" Search wrap around end-of-line
set wrapscan
" Always report changed lines
set report =1
" Max highlite the first 200 columns
set synmaxcol =200
"Indent according to previous lÃ¬ne
set autoindent
" Use inteligent indent for c
set smartindent
" Intelligent comment
set comments=sl:/*,mb:\ *,elx:\ */

"" Make code look pretty
let python_highlight_al=1
syntax on

""Set utf-8 support
set encoding=utf-8

"PowerLine configuration
"set laststatus=2 " Always display the statusline in all windows
"set showtabline=2 " Always display the tabline, even if there is only one tab
"set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Enable folding
set foldmethod=indent
set foldlevel=99
"SimpylFold configuration
let g:SimpylFold_docstring_preview = 1


" Only a underline in actual position
hi clear CursorLine
hi CusorLine gui=underline cterm=underline

filetype on
filetype indent on
filetype plugin on

" Relative in normal mode and absolute in insert mode
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END


" Syntastic configurations
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Temporary swift syntastic
"let g:syntastic_swift_checkers = ['swiftpm', 'swiftlint']
" HTML
let g:syntastic_html_checkers = ['validator']
let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_cpp_checkers = ['gcc']
let g:syntastic_java_checkers = ['javac']
let g:syntastic_go_checkers = ['go', 'gofmt']
let g:syntastic_nasm_checkers = ['nasm']
set completeopt+=preview

" See correct configuration YouCompleteMe
let g:ycm_use_clangd = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 0
let g:ycm_max_num_candidates = 50
let g:ycm_max_num_identifier_candidates = 15
let g:ycm_auto_trigger = 1
let g:ycm_filetype_whitelist = {'*': 1}
let g:ycm_show_diagnostics_ui = 1
let g:ycm_error_symbol = '->'
let g:ycm_warning_symbol = '>>'
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_echo_current_diagnostic = 1
let g:ycm_open_loclist_on_ycm_diags = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_keep_logfiles = 0
let g:ycm_auto_start_csharp_server = 1
let g:ycm_auto_stop_csharp_server = 1
let g:ycm_csharp_server_port = 0
highlight YcmErrorLine guibg=#3f0000
let g:ycm_show_diagnostics_ui = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_add_preview_to_completeopt = 1

let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1

autocmd BufNewFile,BufRead *.asm set filetype=nasm

" Spell
set nospell
set spelllang=es_es

" Usefull for element/func listing without preliminar references to TabNine
" <c-x><c-o>
" Omnicompletion
autocmd FileType python3 set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

set viminfo='10,<100,:100,%,n~/.vim/.viminfo

" fzf commands -->
" :Files [PATH]
" :GFiles [OPTS]
" :Buffers
" :Colors
" :Ag [PATH] ag search result (ALT-A to select all, ALT-D to deselect all)
" (search code)
" :Rg [Pattern] rg search result (ALT-A to select all, ALT-D to deselect all)
" (search patterns Regex)
" :Lines [QUERY]	Lines in loaded buffers
" :BLines [QUERY]	Lines in the current buffer
" :Tags [QUERY]	Tags in the project (ctags -R)
" :BTags [QUERY]	Tags in the current buffer
" :Marks	Marks
" :Windows	Windows
" :Locate PATTERN	locate command output
" :History	v:oldfiles and open buffers
" :History:	Command history
" :History/	Search history
" :Snippets	Snippets (UltiSnips)
" :Commits	Git commits (requires fugitive.vim)
" :BCommits	Git commits for the current buffer
" :Commands	Commands
" :Maps	Normal mode mappings
" :Helptags	Help tags 1
" :Filetypes	File types
"
" Most commands support CTRL-T / CTRL-X / CTRL-V key bindings to open in a new
" tab, a new split, or in a new vertical split

nnoremap <C-h> :call Ffz("Files", "")<left><left>
nnoremap <C-j> :call Ffz("Buffers", "")<left><left>
nnoremap <C-k> :call Ffz("History", "")<left><left>
nnoremap <C-l> :call Ffz("Ag", "")<left><left>
let g:fzf_preview_window = 'right:60%' " Always file previsualization

fun! Ffz(mode, option)
	if a:option == "1"
		let Ffz_var = a:mode . " ."
		execute Ffz_var
	elseif a:option == "2"
		let Ffz_var = a:mode . " .."
		execute Ffz_var
	elseif a:option == "3"
		let Ffz_var = a:mode . " ../.."
		execute Ffz_var
	else 
		let Ffz_var = a:mode . " "  . a:option
		execute Ffz_var
	endif
endfun

" fun! Sfun(fun_name)
" 	let search_fun = 

" fun! GoYCM()
" 	nnoremap <buffer> <silent> <leader> gd :YcmCompleter GoTo<CR>
" 	nnoremap <buffer> <silent> <leader> gr :YcmCompleter GoToReferences<CR>
" 	nnoremap <buffer> <silent> <leader> rr :YcmCompleter RefactorRename<space>
" endfun

" function! s:check_back_space() abort
" 	let col = col('.') - 1
" 	return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" fun! GoCoc()
" 	inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" 	inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" 	inoremap <buffer> <silent><expr> <C-space> coc#refresh()

" 	" GoTo code navigation
" 	nmap <buffer> <leader>gd <Plug>(coc-definition)
" 	nmap <buffer> <leader>gy <Plug>(coc-type-definition)
" 	nmap <buffer> <leader>gi <Plug>(coc-implementation)
" 	nmap <buffer> <leader>gr <Plug>(coc-references)
" 	nnoremap <buffer> <leader>cr :CocRestart
" endfun

" autocmd Filetype typescript,python,python3 :call GoYCM()
" autocmd Filetype cpp,cxx,h,hpp,c :call GoCoc()

" NerdTree
nnoremap <C-n> :NERDTreeToggle<CR>
" Close vim if only nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Open NerdTree when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" When open a saved session don't open NerdTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif
" Open when no vim is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Clipboard
set clipboard=unnamedplus
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+


" Arduino
" nnoremap <buffer> <leader>am :ArduinoVerify<CR>
" nnoremap <buffer> <leader>au :ArduinoUpload<CR>
" nnoremap <buffer> <leader>ad :ArduinoUploadAndSerial<CR>
" nnoremap <buffer> <leader>ab :ArduinoChooseBoard<CR>
" nnoremap <buffer> <leader>ap :ArduinoChooseProgrammer<CR>

" Minimap
" let g:minimap_auto_start = 0
" let g:minimap_block_filetypes = ['nerdtree', 'fugitive', 'syntastic']
" nnoremap <C-m> :MinimapToggle<CR>

" Falla con tabnine arreglar
" Git messenger
let g:git_messenger_no_default_mappings = 1
nmap <C-p> <Plug>(git-messenger)


" Mapping	Description
" q		    Close the popup window
" o			  older. Back to older commit at the line
" O			  Opposite to o. Forward to newer commit at the line
" d			  Toggle diff hunks only related to current file in the commit
" D			  Toggle all diff hunks in the commit
" ?	      Show mappings help

" Vim-signify
" default updatetime 4000ms is not good for async update
" No compatible que sea async con git messenger
" set updatetime=100 

" Vim-slash
noremap <plug>(slash-after) zz
